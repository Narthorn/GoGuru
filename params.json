{
  "name": "Goguru",
  "tagline": "GoGuru is a Golang plugin for SublimeText 3 that integrates the Go guru tool.",
  "body": "GoGuru \r\n=========\r\n\r\nGoGuru is a Golang plugin for [SublimeText](http://www.sublimetext.com/) 3 that integrates the Go [guru](https://godoc.org/golang.org/x/tools/cmd/guru) tool.\r\n\r\nbased on previus work from [waigani](http://github.com/waigani/GoOracle).\r\n\r\nthe guru tool still is on developent,\r\ncheck out the plan, the official git repo and the code review if you want to keep up:\r\n* https://docs.google.com/document/d/1UErU12vR7jTedYvKHVNRzGPmXqdMASZ6PfE7B-p6sIg/edit#\r\n* https://go.googlesource.com/tools/+log/master/cmd/guru\r\n* https://go-review.googlesource.com/#/q/guru\r\n\r\n\r\nUsage\r\n-----\r\n\r\nSelect, or place your cursor over, a symbol (function, variable, constant etc) and press `ctrl+shift+g`. You will be presented with the following modes of analysis to choose from:\r\n\r\n```\r\n\tcallees\t  \tshow possible targets of selected function call\r\n\tcallers\t  \tshow possible callers of selected function\r\n\tcallstack \tshow path from callgraph root to selected function\r\n\tdefinition\tshow declaration of selected identifier\r\n\tdescribe  \tdescribe selected syntax: definition, methods, etc\r\n\tfreevars  \tshow free variables of selection\r\n\timplements\tshow 'implements' relation for selected type or method\r\n\tpeers     \tshow send/receive corresponding to selected channel op\r\n\tpointsto\tshow variables the selected pointer may point to\r\n\treferrers \tshow all refs to entity denoted by selected identifier\r\n\twhat\t\tshow basic information about the selected syntax node\r\n\twhicherrs\tshow possible values of the selected error variable\r\n```\r\n\r\nSelect one and the output will be displayed in a new tab.\r\n\r\n\r\nInstall\r\n-------\r\n\r\nInstall Sublime Package Control (if you haven't done so already) from http://wbond.net/sublime_packages/package_control. Be sure to restart ST to complete the installation.\r\n\r\nBring up the command palette (default ctrl+shift+p or cmd+shift+p) and start typing Package Control: Install Package then press return or click on that option to activate it. You will be presented with a new Quick Panel with the list of available packages. Type GoGuru and press return or on its entry to install GoGuru. If there is no entry for GoGuru, you most likely already have it installed.\r\n\r\nGoOracle has several variables to be set in order to work. These are explained in the comments of the default settings `Preferences > Package Settings > GoOracle > Settings-Default`:\r\n\r\n```javascript\r\n{\r\n\t// use golangconfig, if false then shellenv will be used to get golang environment variables\r\n\t\"use_golangconfig\": false,\r\n\r\n\t// use_current_package adds to the guru_scope the current package of the the working file\r\n\t\"use_current_package\" : true,\r\n\r\n\t// besides showing the result, jump directly to the definition\r\n\t\"jumpto_definition\": false,\r\n\r\n\t// The output can either be one of: 'buffer', 'output_panel'\r\n\t// Buffers can hold results from more than one invocation\r\n\t// Output panels sit underneath the editor area and are easily dismissed\r\n\t\"output\": \"output_panel\",\r\n\r\n\t// print debug info to the terminal\r\n\t\"debug\": false,\r\n\r\n\t// Set guru's output to json\r\n\t\"guru_json\": false,\r\n\r\n\t// guru_scope is an array of scopes of analysis for guru.\r\n\t// e.g (for github.com/juju/juju) \"guru_scope\": [\"github.com/juju/juju/cmd/juju\", \"github.com/juju/juju/cmd/jujud\"]\r\n\t// not used when use_golangconfig is set to true\r\n\r\n\t\"guru_scope\": [],\r\n\r\n\t// env overwrites the default shell environment vars\r\n\t// e.g \"env\": { \"GOPATH\": \"$HOME/go/bin:$PATH\" }\r\n\t// not used when use_golangconfig is set to true\r\n\t\"env\": {},\r\n}\r\n```\r\nYou set your own variables in `Preferences > Package Settings > GoGuru > Settings-User`.\r\n\r\nYou can also make project specific settings. First save your current workspace as a project `Project > Save as project ...`, then edit your project `Project > Edit Project`. Below is an example which sets up GoOracle to be used on the [github.com/juju/juju](https://github.com/juju/juju) codebase:\r\n\r\n```javascript\r\n{\r\n    \"folders\":\r\n    [\r\n        {\r\n            \"follow_symlinks\": true,\r\n            \"path\": \"/home/user/go/src/github.com/juju/juju\"\r\n        }\r\n    ],\r\n    \"settings\":\r\n    {\r\n        \"GoGuru\": {\r\n            \"guru_scope\": [\"github.com/juju/juju/cmd/juju\", \"github.com/juju/juju/cmd/jujud\"],\r\n            \"output\": \"output_panel\"\r\n        }\r\n    },\r\n}\r\n```\r\n\r\nDefault key binding:\r\n\r\n```javascript\r\n[\r\n    { \"keys\": [\"ctrl+shift+g\"], \"command\": \"go_guru\"},\r\n    { \"keys\": [\"ctrl+alt+shift+g\"], \"command\": \"go_guru_show_results\"},\r\n]\r\n```\r\n\r\nYou can set your own key binding by copying the above into `Preferences > Keybindings - User` and replacing ctrl+shift+g with your preferred key(s).\r\n\r\nYou can also set a key binding for a specific mode by adding a \"mode\" arg, e.g.:\r\n\r\n```javascript\r\n    ...\r\n    { \"keys\": [\"ctrl+super+c\"], \"command\": \"go_guru\", \"args\": {\"mode\": \"callers\"} },\r\n    { \"keys\": [\"ctrl+super+i\"], \"command\": \"go_guru\", \"args\": {\"mode\": \"implements\"} },\r\n    { \"keys\": [\"ctrl+super+r\"], \"command\": \"go_guru\", \"args\": {\"mode\": \"referrers\"} },\r\n    ...\r\n```\r\n\r\n\r\nDependencies\r\n------------\r\nGoGuru relies on the guru tool. You must install it in order for GoGuru to work. Run the following on your command line:\r\n\r\n`go get -u golang.org/x/tools/cmd/guru`\r\n\r\n\r\nAbout Go Guru\r\n---------------\r\n\r\n- [User Manual](https://docs.google.com/document/d/1SLk36YRjjMgKqe490mSRzOPYEDe0Y_WQNRv-EiFYUyw/view#)\r\n- [Design Document](https://docs.google.com/a/canonical.com/document/d/1WmMHBUjQiuy15JfEnT8YBROQmEv-7K6bV-Y_K53oi5Y/edit#heading=h.m6dk5m56ri4e)\r\n- [GoDoc](https://godoc.org/golang.org/x/tools/cmd/oracle)\r\n\r\n\r\nCopyright, License & Contributors\r\n=================================\r\n\r\nGoGuru is released under the MIT license. See [LICENSE.md](LICENSE.md)\r\n\r\nGoGuru is the copyrighted work of *The GoGuru Authors* i.e me ([alvarolm](https://github.com/alvarolm/GoGuru)) and *all* contributors. If you submit a change, be it documentation or code, so long as it's committed to GoGuru's history I consider you a contributor. See [AUTHORS.md](AUTHORS.md) for a list of all the GoGuru authors/contributors.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}